/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gen_4 (
    input clk,
    input en,
    input rst,
    input [31:0] seed,
    output reg [15:0] out
  );
  
  
  
  localparam START_states = 2'd0;
  localparam SPIN_states = 2'd1;
  localparam DONE_states = 2'd2;
  
  reg [1:0] M_states_d, M_states_q = START_states;
  reg [31:0] M_regs_d, M_regs_q = 1'h0;
  reg [28:0] M_timer_d, M_timer_q = 1'h0;
  wire [32-1:0] M_rand_num;
  reg [1-1:0] M_rand_next;
  reg [32-1:0] M_rand_seed;
  pn_gen_7 rand (
    .clk(clk),
    .rst(rst),
    .next(M_rand_next),
    .seed(M_rand_seed),
    .num(M_rand_num)
  );
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  reg [7-1:0] M_alu16_alufn;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  alu_8 alu16 (
    .alufn(M_alu16_alufn),
    .a(M_alu16_a),
    .b(M_alu16_b),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n)
  );
  
  always @* begin
    M_states_d = M_states_q;
    M_timer_d = M_timer_q;
    M_regs_d = M_regs_q;
    
    M_rand_seed = seed;
    M_rand_next = 1'h0;
    out = 1'h0;
    M_alu16_a = 16'h0000;
    M_alu16_b = 16'h0000;
    M_alu16_alufn = 7'h00;
    
    case (M_states_q)
      START_states: begin
        M_rand_seed = seed;
        M_rand_next = 1'h0;
        M_timer_d = 1'h0;
        if (en == 1'h1) begin
          M_states_d = SPIN_states;
        end
      end
      SPIN_states: begin
        M_rand_next = 1'h1;
        M_timer_d = M_timer_q + 1'h1;
        if (M_timer_q[27+0-:1] == 1'h1) begin
          M_states_d = DONE_states;
        end else begin
          if (M_timer_q[20+0-:1] == 1'h1) begin
            M_regs_d = M_rand_num;
          end else begin
            out = M_regs_q[0+15-:16];
          end
        end
      end
      DONE_states: begin
        M_alu16_a = M_rand_num[16+15-:16];
        M_alu16_b = M_rand_num[0+15-:16];
        if (M_rand_num[14+3-:4] == 4'h0) begin
          M_alu16_alufn = 7'h00;
        end
        if (M_rand_num[14+3-:4] == 4'h1) begin
          M_alu16_alufn = 7'h01;
        end
        if (M_rand_num[14+3-:4] == 4'h2) begin
          M_alu16_alufn = 7'h18;
        end
        if (M_rand_num[14+3-:4] == 4'h3) begin
          M_alu16_alufn = 7'h1e;
        end
        if (M_rand_num[14+3-:4] == 4'h4) begin
          M_alu16_alufn = 7'h16;
        end
        if (M_rand_num[14+3-:4] == 4'h5) begin
          M_alu16_alufn = 7'h1a;
        end
        if (M_rand_num[14+3-:4] == 4'h6) begin
          M_alu16_alufn = 7'h17;
        end
        if (M_rand_num[14+3-:4] == 4'h7) begin
          M_alu16_alufn = 7'h11;
        end
        if (M_rand_num[14+3-:4] == 4'h8) begin
          M_alu16_alufn = 7'h19;
        end
        if (M_rand_num[14+3-:4] == 4'h9) begin
          M_alu16_alufn = 7'h33;
        end
        if (M_rand_num[14+3-:4] == 4'ha) begin
          M_alu16_alufn = 7'h20;
        end
        if (M_rand_num[14+3-:4] == 4'hb) begin
          M_alu16_alufn = 7'h21;
        end
        if (M_rand_num[14+3-:4] == 4'hc) begin
          M_alu16_alufn = 7'h23;
        end
        if (M_rand_num[14+3-:4] == 4'hd) begin
          M_alu16_alufn = 7'h40;
        end
        if (M_rand_num[14+3-:4] == 4'he) begin
          M_alu16_alufn = 7'h00;
        end
        if (M_rand_num[14+3-:4] == 4'hf) begin
          M_alu16_alufn = 7'h01;
        end
        out = M_alu16_out;
        M_timer_d = 1'h0;
        if (en == 1'h1) begin
          M_states_d = SPIN_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_regs_q <= 1'h0;
      M_timer_q <= 1'h0;
      M_states_q <= 1'h0;
    end else begin
      M_regs_q <= M_regs_d;
      M_timer_q <= M_timer_d;
      M_states_q <= M_states_d;
    end
  end
  
endmodule

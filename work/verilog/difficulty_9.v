/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module difficulty_9 (
    input clk,
    input rst,
    output reg out,
    output reg [2:0] diff,
    input diffchange,
    input [15:0] num
  );
  
  
  
  localparam EASY_states = 2'd0;
  localparam MEDIUM_states = 2'd1;
  localparam HARD_states = 2'd2;
  
  reg [1:0] M_states_d, M_states_q = EASY_states;
  
  reg [4:0] i;
  
  reg [4:0] ones;
  
  always @* begin
    M_states_d = M_states_q;
    
    i = 1'h0;
    ones = 1'h0;
    out = 1'h0;
    diff = 3'h0;
    
    case (M_states_q)
      EASY_states: begin
        diff = 3'h1;
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          if (num[(i)*1+0-:1] == 1'h1) begin
            ones = ones + 1'h1;
          end
        end
        if (ones > 4'ha) begin
          out = 1'h1;
        end
        if (ones == 3'h4) begin
          for (i = 1'h0; i < 3'h4; i = i + 1) begin
            if ((num[(i)*1+0-:1] & num[(i + 3'h4)*1+0-:1] & num[(i + 4'h8)*1+0-:1] & num[(i + 4'hc)*1+0-:1]) == 1'h1) begin
              out = 1'h1;
            end
            if ((num[(3'h4 * i)*1+0-:1] & num[(3'h4 * i + 1'h1)*1+0-:1] & num[(3'h4 * i + 2'h2)*1+0-:1] & num[(3'h4 * i + 2'h3)*1+0-:1]) == 1'h1) begin
              out = 1'h1;
            end
          end
          if (num[0+0-:1] & num[5+0-:1] & num[10+0-:1] & num[15+0-:1] == 1'h1) begin
            out = 1'h1;
          end
          if (num[12+0-:1] & num[9+0-:1] & num[6+0-:1] & num[3+0-:1] == 1'h1) begin
            out = 1'h1;
          end
        end
        if (num == 16'hffff) begin
          out = 1'h1;
        end
        if (diffchange == 1'h1) begin
          M_states_d = MEDIUM_states;
        end
      end
      MEDIUM_states: begin
        diff = 3'h2;
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          if (num[(i)*1+0-:1] == 1'h1) begin
            ones = ones + 1'h1;
          end
        end
        if (ones == 3'h4) begin
          for (i = 1'h0; i < 3'h4; i = i + 1) begin
            if (num[(i)*1+0-:1] & num[(i + 3'h4)*1+0-:1] & num[(i + 4'h8)*1+0-:1] & num[(i + 4'hc)*1+0-:1] == 1'h1) begin
              out = 1'h1;
            end
            if (num[(3'h4 * i)*1+0-:1] & num[(3'h4 * i + 1'h1)*1+0-:1] & num[(3'h4 * i + 2'h2)*1+0-:1] & num[(3'h4 * i + 2'h3)*1+0-:1] == 1'h1) begin
              out = 1'h1;
            end
          end
          if (num[0+0-:1] & num[5+0-:1] & num[10+0-:1] & num[15+0-:1] == 1'h1) begin
            out = 1'h1;
          end
          if (num[12+0-:1] & num[9+0-:1] & num[6+0-:1] & num[3+0-:1] == 1'h1) begin
            out = 1'h1;
          end
        end
        if (num == 16'hffff) begin
          out = 1'h1;
        end
        if (diffchange == 1'h1) begin
          M_states_d = HARD_states;
        end
      end
      HARD_states: begin
        diff = 3'h4;
        if (num == 16'hffff) begin
          out = 1'h1;
        end
        if (diffchange == 1'h1) begin
          M_states_d = EASY_states;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_states_q <= 1'h0;
    end else begin
      M_states_q <= M_states_d;
    end
  end
  
endmodule

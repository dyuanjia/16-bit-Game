module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],
    output a0, // output to LEDs
    output a1,
    output a2,
    output a3,
    output a4,
    output a5,
    output a6,
    output a7,
    output a8,
    output a9,
    output a10,
    output a11,
    output a12,
    output a13,
    output a14,
    output a15     // DIP switches on IO Shield   
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner btn_cond;
    edge_detector edge;
    
    .rst(rst) { 
      gen nums;
      display seg;
    }    
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
        
    io_led = 3x{{8h00}};
    io_seg = ~seg.seg;             // connect segments to the driver
    io_sel = ~seg.sel; 
    
    btn_cond.in=io_button[0];
    edge.in=btn_cond.out;
    nums.en=edge.out;
    
    io_led[1]=nums.out[15:8];
    io_led[0]=nums.out[7:0];
    a0 = nums.out[0];
    a1 = nums.out[1];
    a2 = nums.out[2];
    a3 = nums.out[3];
    a4 = nums.out[4];
    a5 = nums.out[5];
    a6 = nums.out[6];
    a7 = nums.out[7];
    a8 = nums.out[8];
    a9 = nums.out[9];
    a10 = nums.out[10];
    a11 = nums.out[11];
    a12 = nums.out[12];
    a13 = nums.out[13];
    a14 = nums.out[14];
    a15 = nums.out[15];
    
    
    nums.seed[31:24]=8b01010101;         // SEED: very important
    nums.seed[23:16]=io_dip[2];
    nums.seed[15:8]=io_dip[1];
    nums.seed[7:0]=io_dip[0];
    
    seg.chars = {5h0, 5h0, 5h0, 5h0};    // clear display
        
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
          
  }
}